// Redi Key Value

127.0.0.1:6379> set name "Ankur"
OK
127.0.0.1:6379> set fname "Ankur"
OK
127.0.0.1:6379> set lname " Bhargava"
OK
127.0.0.1:6379> get name
"Ankur"
127.0.0.1:6379> get fname
"Ankur"
127.0.0.1:6379> get lastname
(nil)
127.0.0.1:6379> get lname
" Bhargava"
127.0.0.1:6379> del name
(integer) 1 // no of key deleted
127.0.0.1:6379> get name
(nil)
127.0.0.1:6379> set key1 value1
OK
127.0.0.1:6379> set key2 value2
OK
127.0.0.1:6379> set key3 value3
OK
127.0.0.1:6379> del key1 key2 key3
(integer) 3  // three key deleted
127.0.0.1:6379> get key1
(nil)
127.0.0.1:6379> exists fname
(integer) 1
127.0.0.1:6379> exists lname
(integer) 1
127.0.0.1:6379> exists fname lname
(integer) 2 // 2 key exist
127.0.0.1:6379> exist name
(error) ERR unknown command `exist`, with args beginning with: `name`,
127.0.0.1:6379> exists name
(integer) 0 //0 key exist


// keys with expirations
ex => expiration in sec
px => expiration in msec
127.0.0.1:6379> set 1 hello ex 120
OK
127.0.0.1:6379> ttl 1
(integer) 115

127.0.0.1:6379> expire 1 10
(integer) 1
127.0.0.1:6379> ttl 1
(integer) 4
127.0.0.1:6379> ttl 1
(integer) 2
127.0.0.1:6379> ttl 1
(integer) 0
127.0.0.1:6379> ttl 1
(integer) -2
127.0.0.1:6379> set 1 hello px 1000
OK
127.0.0.1:6379> ttl 1
(integer) -2
127.0.0.1:6379> pttl 1
(integer) -2
127.0.0.1:6379> set 1 hello px 100000
OK
127.0.0.1:6379> expire 1 10
(integer) 1
127.0.0.1:6379> set 1 hello px 1000000
OK
127.0.0.1:6379> pttl 1
(integer) 994671
127.0.0.1:6379> pexpire 1 100
(integer) 1
127.0.0.1:6379> pttl 1
(integer) -2

-2 = expired

// persist 
// 1 is the timeout was removed
0 if the key does not exist or associate with time out


127.0.0.1:6379> set 1 hello ex 120
OK
127.0.0.1:6379> ttl 1
(integer) 112
127.0.0.1:6379> persist 1
(integer) 1
127.0.0.1:6379> ttl 1
(integer) -1
127.0.0.1:6379> set 2 hello
OK
127.0.0.1:6379> persist 2
(integer) 0

127.0.0.1:6379> set 3 hello ex 10
OK
127.0.0.1:6379> ttl 3
(integer) 6
127.0.0.1:6379> persist 3
(integer) 0
127.0.0.1:6379>



Keys are expired in tow ways
- Passive - A key is passively expired simply when some client tries to access  it and the key is found to be time out
- Active ways- Redis does 10 times per second:
	Test 20 random keys from the set of keys with associated expire, Delete all the keys , if more than 25% of keys were expired , start again from step 1
	
	
	
Key space - is like database namespace , schema 
Key space start from 0 , 
>> Select index (0, 1,2,3....)

 you cannot connect keys to multiple keyspace
 
 127.0.0.1:6379> keys *
1) "mykey"
2) "fname"
3) "2"
4) "1"
5) "lname"
127.0.0.1:6379> select 0
OK
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> set fname "test"
OK
127.0.0.1:6379[1]> get fname
"test"
127.0.0.1:6379[1]> set lname test123
OK
127.0.0.1:6379[1]> get lname
"test123"
127.0.0.1:6379[1]> keys *
1) "lname"
2) "fname"
127.0.0.1:6379[1]> flushdb
OK
127.0.0.1:6379[1]> keys *
(empty array)


//KEY PATTERN
h?llo matches hello, hallo, hxllo
h*llo matches hllo and heeeello
h[ae]llo matches hello and hallo, but not hillo
h[^e]llo matches hallo, hbllo, but not hello
h[a-b]llo matched hallo and hbllo


127.0.0.1:6379> set hello "hello"
OK
127.0.0.1:6379> set hallo "hallo"
OK
127.0.0.1:6379> set hbllo "hbllo"
OK
127.0.0.1:6379> sel hcllo "hcllo"
(error) ERR unknown command `sel`, with args beginning with: `hcllo`, `hcllo`,
127.0.0.1:6379> set hcllo "hcllo"
OK
127.0.0.1:6379> set hdllo "hdllo"
OK
127.0.0.1:6379> set hfllo "hfllo"
OK
127.0.0.1:6379> set heello "heello"
OK
127.0.0.1:6379> set heeello "heeello"
OK
127.0.0.1:6379> set heeeallo "heeeallo"
OK
127.0.0.1:6379> keys h?llo
1) "hcllo"
2) "hbllo"
3) "hdllo"
4) "hallo"
5) "hello"
6) "hfllo"
127.0.0.1:6379> keys h*llo
1) "hcllo"
2) "hbllo"
3) "heeeallo"
4) "heeello"
5) "hdllo"
6) "hallo"
7) "hello"
8) "hfllo"
9) "heello"
127.0.0.1:6379> keys h[ae]llo
1) "hallo"
2) "hello"
127.0.0.1:6379> keys h[^e]llo
1) "hcllo"
2) "hbllo"
3) "hdllo"
4) "hallo"
5) "hfllo"
127.0.0.1:6379> keys h[a-d]llo
1) "hcllo"
2) "hbllo"
3) "hdllo"
4) "hallo"
127.0.0.1:6379>



// Save the database// 

shutdown save


//Rename

OK
127.0.0.1:6379> rename myname newname
OK
127.0.0.1:6379> get myname
(nil)
127.0.0.1:6379> get newname
"test"
127.0.0.1:6379> rename unknown testkey
(error) ERR no such key
127.0.0.1:6379> set key t1 "test1"
(error) ERR syntax error
127.0.0.1:6379> set t1 "test1"
OK
127.0.0.1:6379> set t2 "test2"
OK
127.0.0.1:6379> get t1
"test1"
127.0.0.1:6379> get t2
"test2"
127.0.0.1:6379> rename t1 t2
OK
127.0.0.1:6379> get t1
(nil)
127.0.0.1:6379> get t2
"test1"


// if key doesnt exist it will give error
// if the key exist by the newkey also exist it will override it. it will explicity call del on existing key.



//Renamenx =>
1 if key was renamed to newkey
0 if newkey already exists.

127.0.0.1:6379> set k1 v1
OK
127.0.0.1:6379> set k2 v2
OK
127.0.0.1:6379> getk1
(error) ERR unknown command `getk1`, with args beginning with:
127.0.0.1:6379> get k1
"v1"
127.0.0.1:6379> get k2
"v2"
127.0.0.1:6379> renamenx k1 k2
(integer) 0
127.0.0.1:6379> renamenx k1 k3
(integer) 1
127.0.0.1:6379> get k1
(nil)
127.0.0.1:6379> get k2
"v2"
127.0.0.1:6379> get k3
"v1"

// Unlink  this is async as compare to del where keys are deleted in order

127.0.0.1:6379> flushdb
OK
127.0.0.1:6379> keys *
(empty array)
127.0.0.1:6379> set k1 v1
OK
127.0.0.1:6379> set k2 v2
OK
127.0.0.1:6379> del k1 k2
(integer) 2
127.0.0.1:6379> set k1 v1
OK
127.0.0.1:6379> del k1 k2
(integer) 1
127.0.0.1:6379> set k1 v1
OK
127.0.0.1:6379> set k2 v2
OK
127.0.0.1:6379> unlink k1 k2
(integer) 2


// Type -- data types 

127.0.0.1:6379> keys *
(empty array)
127.0.0.1:6379> set name "ankur"
OK
127.0.0.1:6379> get name
"ankur"
127.0.0.1:6379> type name
string
127.0.0.1:6379> lpush k1 "value"
(integer) 1
127.0.0.1:6379> type k1
list
127.0.0.1:6379> sadd h2 "test"
(integer) 1
127.0.0.1:6379> type h2
set





 